// src/Pages/PhotoGallery.jsx
import React, { useState, useEffect, useContext } from "react";
import { Link, useNavigate, useSearchParams } from "react-router-dom"; // –î–æ–¥–∞—î–º–æ useNavigate, useSearchParams
import { supabase } from "../lib/supabase";
import styles from "./PhotoGallery.module.css";
import { AppContext } from "../components/App/App";

// –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ –ø–∞–ø–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
const getJobFolderName = (job) => {
  if (!job) return "Unknown Job";
  return `Order #${job.id} - ${job.address || job.client || "Details N/A"}`;
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—ñ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π (–±—É–¥–µ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ –ø—ñ–∑–Ω—ñ—à–µ)
const PhotoGridDisplay = ({ jobId, photoType, onBack }) => {
  const [photos, setPhotos] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [modalUrl, setModalUrl] = useState(null);
  const [title, setTitle] = useState("");

  useEffect(() => {
    const fetchPhotosForJob = async () => {
      if (!jobId || !photoType) return;
      setLoading(true);
      setError(null);
      let query;
      let photoData = [];

      try {
        if (photoType === "after") {
          setTitle("After Work Photos");
          query = supabase
            .from("photos_after")
            .select("id, url, caption, created_at, job_id")
            .eq("job_id", jobId)
            .order("created_at", { ascending: false });
        } else if (photoType === "materials") {
          setTitle("Materials Photos");
          query = supabase
            .from("materials")
            .select("id, url, description, amount, created_at, job_id")
            .eq("job_id", jobId)
            .not("url", "is", null) // –¢—ñ–ª—å–∫–∏ —Ç—ñ, —â–æ –º–∞—é—Ç—å URL
            .order("created_at", { ascending: false });
        } else if (photoType === "job_order") {
          setTitle("Job Order Photo");
          const { data: jobData, error: jobFetchError } = await supabase
            .from("jobs")
            .select("id, job_order_photo_url, created_at, client, address") // client/address –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
            .eq("id", jobId)
            .single();
          if (jobFetchError) throw jobFetchError;
          if (jobData && jobData.job_order_photo_url) {
            // –Ü–º—ñ—Ç—É—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —ñ–Ω—à–∏—Ö —Ñ–æ—Ç–æ –¥–ª—è —É–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            photoData = [
              {
                id: `job_order_${jobData.id}`,
                url: jobData.job_order_photo_url,
                caption: `Job Order Photo for ${getJobFolderName(jobData)}`,
                created_at: jobData.created_at, // –î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                job_id: jobData.id,
              },
            ];
          }
        }

        if (query) {
          const { data, error: fetchError } = await query;
          if (fetchError) throw fetchError;
          photoData = data.map((p) => ({
            ...p,
            caption: p.caption || p.description, // –î–ª—è –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ description —è–∫ caption
          }));
        }
        setPhotos(photoData || []);
      } catch (err) {
        setError(`Failed to load ${photoType} photos: ${err.message}`);
        setPhotos([]);
      } finally {
        setLoading(false);
      }
    };
    fetchPhotosForJob();
  }, [jobId, photoType]);

  const openModal = (url) => setModalUrl(url);
  const closeModal = () => setModalUrl(null);

  if (loading) return <p className={styles.loading}>Loading photos...</p>;
  if (error) return <p className={styles.error}>{error}</p>;

  return (
    <div className={styles.photoGridContainer}>
      <button onClick={onBack} className={styles.backButton}>
        &larr; Back to Job Folders
      </button>
      <h2 className={styles.subTitle}>
        {title} for {jobId && `Order #${jobId}`}
      </h2>
      {photos.length === 0 && (
        <p className={styles.noPhotos}>No photos found for this category.</p>
      )}
      <div className={styles.photoGrid}>
        {photos.map((photo) => (
          <div
            key={photo.id || photo.url}
            className={styles.photoCard}
            onClick={() => openModal(photo.url)}
          >
            <img
              src={photo.url}
              alt={photo.caption || `Photo for job ${photo.job_id}`}
              className={styles.photoThumb}
            />
            <div className={styles.photoInfo}>
              {photo.caption && (
                <p className={styles.caption}>{photo.caption}</p>
              )}
              <p className={styles.date}>
                {new Date(photo.created_at).toLocaleDateString()}
              </p>
            </div>
          </div>
        ))}
      </div>
      {/* –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ */}
      {modalUrl && (
        <div className={styles.modalOverlay} onClick={closeModal}>
          <div
            className={styles.modalContent}
            onClick={(e) => e.stopPropagation()}
          >
            <button className={styles.closeBtn} onClick={closeModal}>
              &times;
            </button>
            <img src={modalUrl} alt="Enlarged" className={styles.modalImg} />
          </div>
        </div>
      )}
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—ñ–¥–ø–∞–ø–æ–∫ –¥–ª—è –æ–±—Ä–∞–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
const JobPhotoTypes = ({ job, onSelectPhotoType, onBack }) => {
  if (!job) return null;
  const photoTypes = [
    { type: "after", label: "After Work Photos" },
    { type: "materials", label: "Materials Photos" },
    { type: "job_order", label: "Job Order Photo" },
  ];

  return (
    <div className={styles.jobPhotoTypesContainer}>
      <button onClick={onBack} className={styles.backButton}>
        &larr; Back to Orders List
      </button>
      <h2 className={styles.subTitle}>
        Photo Categories for {getJobFolderName(job)}
      </h2>
      <div className={styles.folderGrid}>
        {photoTypes.map((pt) => (
          <div
            key={pt.type}
            className={styles.folderCard}
            onClick={() => onSelectPhotoType(pt.type)}
          >
            <div className={styles.folderIcon}>üìÅ</div>{" "}
            {/* –ü—Ä–æ—Å—Ç–∞ —ñ–∫–æ–Ω–∫–∞ –ø–∞–ø–∫–∏ */}
            <p className={styles.folderName}>{pt.label}</p>
          </div>
        ))}
      </div>
    </div>
  );
};

export default function PhotoGallery() {
  const { user } = useContext(AppContext);
  const [jobs, setJobs] = useState([]); // –°–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å (–ø–∞–ø–æ–∫)
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ useSearchParams –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω–æ–º –≤ URL
  const [searchParams, setSearchParams] = useSearchParams();
  const selectedJobId = searchParams.get("jobId");
  const selectedPhotoType = searchParams.get("photoType");

  const [searchTerm, setSearchTerm] = useState(""); // –î–ª—è –ø–æ—à—É–∫—É –∑–∞–º–æ–≤–ª–µ–Ω—å

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∑–∞–º–æ–≤–ª–µ–Ω—å
  useEffect(() => {
    const fetchJobsForGallery = async () => {
      setLoading(true);
      setError(null);
      try {
        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ª–∏—à–µ —Ç—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –¥–ª—è —è–∫–∏—Ö –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ —î —Ñ–æ—Ç–æ
        // –¶–µ –º–æ–∂–µ –±—É—Ç–∏ —Å–∫–ª–∞–¥–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ñ–æ—Ç–æ –≤ –∫—ñ–ª—å–∫–æ—Ö —Ç–∞–±–ª–∏—Ü—è—Ö.
        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏, –ø–æ–∫–∏ —â–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, —è–∫—ñ –º–æ–∂–µ –±–∞—á–∏—Ç–∏ –∞–¥–º—ñ–Ω.
        // –ü—ñ–∑–Ω—ñ—à–µ –º–æ–∂–Ω–∞ –æ–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏, —â–æ–± –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –ª–∏—à–µ "–ø–∞–ø–∫–∏" –∑ —Ñ–æ—Ç–æ.
        let query = supabase
          .from("jobs")
          .select("id, address, client, created_at, job_order_photo_url") // –ü–æ–ª—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–∞–ø–∫–∏ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ Job Order Photo
          .order("created_at", { ascending: false });

        // TODO: –î–æ–¥–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é –∑–∞–º–æ–≤–ª–µ–Ω—å, —è–∫—â–æ —Ü–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∑–∞ –¥–∞—Ç–æ—é, —Å—Ç–∞—Ç—É—Å–æ–º)

        const { data, error: fetchError } = await query;
        if (fetchError) throw fetchError;
        setJobs(data || []);
      } catch (err) {
        setError(`Failed to load jobs for gallery: ${err.message}`);
        setJobs([]);
      } finally {
        setLoading(false);
      }
    };

    if (user?.role === "admin") {
      // –ì–∞–ª–µ—Ä–µ—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—É
      fetchJobsForGallery();
    }
  }, [user]); // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ, —è–∫—â–æ –∑–º—ñ–Ω–∏–≤—Å—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á

  const filteredJobs = jobs.filter((job) => {
    const term = searchTerm.toLowerCase();
    return (
      getJobFolderName(job).toLowerCase().includes(term) ||
      job.id.toString().includes(term)
    );
  });

  // –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
  const handleSelectJob = (jobId) => {
    setSearchParams({ jobId });
  };

  const handleSelectPhotoType = (photoType) => {
    setSearchParams({ jobId: selectedJobId, photoType });
  };

  const handleBackToOrders = () => {
    setSearchParams({});
  };

  const handleBackToJobFolders = () => {
    setSearchParams({ jobId: selectedJobId });
  };

  // –õ–æ–≥—ñ–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –æ–±—Ä–∞–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è
  if (user?.role !== "admin") {
    return (
      <p className={styles.accessDenied}>
        Access Denied. Photo Gallery is for admins only.
      </p>
    );
  }

  if (loading && !selectedJobId)
    return <p className={styles.loading}>Loading orders for gallery...</p>;
  if (error) return <p className={styles.error}>{error}</p>;

  // –†—ñ–≤–µ–Ω—å 3: –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—ñ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π
  if (selectedJobId && selectedPhotoType) {
    return (
      <PhotoGridDisplay
        jobId={selectedJobId}
        photoType={selectedPhotoType}
        onBack={handleBackToJobFolders}
      />
    );
  }

  // –†—ñ–≤–µ–Ω—å 2: –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∏–ø—ñ–≤ —Ñ–æ—Ç–æ –¥–ª—è –æ–±—Ä–∞–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
  if (selectedJobId) {
    const job = jobs.find((j) => j.id.toString() === selectedJobId);
    return (
      <JobPhotoTypes
        job={job}
        onSelectPhotoType={handleSelectPhotoType}
        onBack={handleBackToOrders}
      />
    );
  }

  // –†—ñ–≤–µ–Ω—å 1: –°–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å (–ø–∞–ø–æ–∫)
  return (
    <div className={styles.galleryPage}>
      <h1 className={styles.pageTitle}>Photo Gallery - Orders</h1>
      <input
        type="text"
        placeholder="Search orders by address, client, or ID..."
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
        className={styles.searchInput} // –ü–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ —Å—Ç–∏–ª—å
      />

      {filteredJobs.length === 0 && !loading && (
        <p className={styles.noPhotos}>
          No orders found matching your criteria.
        </p>
      )}

      <div className={styles.folderGrid}>
        {" "}
        {/* –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–æ–π —Å–∞–º–∏–π —Å—Ç–∏–ª—å –¥–ª—è —Å—ñ—Ç–∫–∏ –ø–∞–ø–æ–∫ */}
        {filteredJobs.map((job) => (
          <div
            key={job.id}
            className={styles.folderCard}
            onClick={() => handleSelectJob(job.id.toString())}
          >
            <div className={styles.folderIcon}>üóÇÔ∏è</div>{" "}
            {/* –Ü–∫–æ–Ω–∫–∞ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è */}
            <p className={styles.folderName}>{getJobFolderName(job)}</p>
            <p className={styles.folderDate}>
              Created: {new Date(job.created_at).toLocaleDateString()}
            </p>
          </div>
        ))}
      </div>
    </div>
  );
}
